// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workspace_invites.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const acceptWorkspaceInvite = `-- name: AcceptWorkspaceInvite :one
UPDATE workspace_invites
SET
    status = 'accepted',
    invitee_id = $2
WHERE
    token = $1
    AND status = 'pending'
    AND expires_at > NOW()
RETURNING id, workspace_id, invited_by, invitee_id, invitee_email, access_type, token, status, created_at, expires_at
`

type AcceptWorkspaceInviteParams struct {
	Token     string `json:"token"`
	InviteeID string `json:"invitee_id"`
}

func (q *Queries) AcceptWorkspaceInvite(ctx context.Context, arg AcceptWorkspaceInviteParams) (WorkspaceInvite, error) {
	row := q.db.QueryRow(ctx, acceptWorkspaceInvite, arg.Token, arg.InviteeID)
	var i WorkspaceInvite
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InvitedBy,
		&i.InviteeID,
		&i.InviteeEmail,
		&i.AccessType,
		&i.Token,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const createWorkspaceInvite = `-- name: CreateWorkspaceInvite :one
INSERT INTO workspace_invites (
    workspace_id,
    invited_by,
    invitee_id,
    invitee_email,
    access_type,
    token
) VALUES (
    $1,  -- workspace_id
    $2,  -- invited_by (user_id)
    $4,  -- invitee_id (nullable)
    $3,  -- invitee_email
    COALESCE($5, 'member'),  -- access_type
    $6   -- token (e.g. UUID or secure random string)
)
RETURNING id, workspace_id, invited_by, invitee_id, invitee_email, access_type, token, status, created_at, expires_at
`

type CreateWorkspaceInviteParams struct {
	WorkspaceID  pgtype.UUID `json:"workspace_id"`
	InvitedBy    string      `json:"invited_by"`
	InviteeEmail string      `json:"invitee_email"`
	InviteeID    string      `json:"invitee_id"`
	Column5      interface{} `json:"column_5"`
	Token        string      `json:"token"`
}

func (q *Queries) CreateWorkspaceInvite(ctx context.Context, arg CreateWorkspaceInviteParams) (WorkspaceInvite, error) {
	row := q.db.QueryRow(ctx, createWorkspaceInvite,
		arg.WorkspaceID,
		arg.InvitedBy,
		arg.InviteeEmail,
		arg.InviteeID,
		arg.Column5,
		arg.Token,
	)
	var i WorkspaceInvite
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.InvitedBy,
		&i.InviteeID,
		&i.InviteeEmail,
		&i.AccessType,
		&i.Token,
		&i.Status,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteWorkspaceInvite = `-- name: DeleteWorkspaceInvite :exec
DELETE FROM workspace_invites
WHERE id = $1
`

func (q *Queries) DeleteWorkspaceInvite(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWorkspaceInvite, id)
	return err
}

const listInvitesForUser = `-- name: ListInvitesForUser :many
SELECT id, workspace_id, invited_by, invitee_id, invitee_email, access_type, token, status, created_at, expires_at
FROM workspace_invites
WHERE
    (invitee_id = $1 OR invitee_email = $2)
    AND status = 'pending'
    AND expires_at > NOW()
ORDER BY created_at DESC
`

type ListInvitesForUserParams struct {
	InviteeID    string `json:"invitee_id"`
	InviteeEmail string `json:"invitee_email"`
}

func (q *Queries) ListInvitesForUser(ctx context.Context, arg ListInvitesForUserParams) ([]WorkspaceInvite, error) {
	rows, err := q.db.Query(ctx, listInvitesForUser, arg.InviteeID, arg.InviteeEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkspaceInvite
	for rows.Next() {
		var i WorkspaceInvite
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.InvitedBy,
			&i.InviteeID,
			&i.InviteeEmail,
			&i.AccessType,
			&i.Token,
			&i.Status,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
