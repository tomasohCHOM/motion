// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: files.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
  id, user_id, original_name, storage_key, content_type, size_bytes, metadata
) VALUES (

  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, user_id, original_name, storage_key, content_type, size_bytes, uploaded_at, metadata, created_at, updated_at
`

type CreateFileParams struct {
	ID           pgtype.UUID `json:"id"`
	UserID       pgtype.UUID `json:"user_id"`
	OriginalName string      `json:"original_name"`
	StorageKey   string      `json:"storage_key"`
	ContentType  string      `json:"content_type"`
	SizeBytes    int64       `json:"size_bytes"`
	Metadata     []byte      `json:"metadata"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.ID,
		arg.UserID,
		arg.OriginalName,
		arg.StorageKey,
		arg.ContentType,
		arg.SizeBytes,
		arg.Metadata,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalName,
		&i.StorageKey,
		&i.ContentType,
		&i.SizeBytes,
		&i.UploadedAt,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files
WHERE id = $1 AND user_id = $2
`

type DeleteFileParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteFile(ctx context.Context, arg DeleteFileParams) error {
	_, err := q.db.Exec(ctx, deleteFile, arg.ID, arg.UserID)
	return err
}

const getFileById = `-- name: GetFileById :many
SELECT id, user_id, original_name, storage_key, content_type, size_bytes, uploaded_at, metadata, created_at, updated_at FROM files
WHERE id = $1
`

func (q *Queries) GetFileById(ctx context.Context, id pgtype.UUID) ([]File, error) {
	rows, err := q.db.Query(ctx, getFileById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalName,
			&i.StorageKey,
			&i.ContentType,
			&i.SizeBytes,
			&i.UploadedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFilesByUser = `-- name: ListFilesByUser :many
SELECT id, user_id, original_name, storage_key, content_type, size_bytes, uploaded_at, metadata, created_at, updated_at FROM files
WHERE user_id = $1
ORDER BY uploaded_at DESC
LIMIT $2 OFFSET $3
`

type ListFilesByUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListFilesByUser(ctx context.Context, arg ListFilesByUserParams) ([]File, error) {
	rows, err := q.db.Query(ctx, listFilesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalName,
			&i.StorageKey,
			&i.ContentType,
			&i.SizeBytes,
			&i.UploadedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchFilesByMetadata = `-- name: SearchFilesByMetadata :many
SELECT id, user_id, original_name, storage_key, content_type, size_bytes, uploaded_at, metadata, created_at, updated_at FROM files
WHERE user_id = $1 AND metadata @> $2::jsonb
ORDER BY uploaded_at DESC
`

type SearchFilesByMetadataParams struct {
	UserID  pgtype.UUID `json:"user_id"`
	Column2 []byte      `json:"column_2"`
}

func (q *Queries) SearchFilesByMetadata(ctx context.Context, arg SearchFilesByMetadataParams) ([]File, error) {
	rows, err := q.db.Query(ctx, searchFilesByMetadata, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OriginalName,
			&i.StorageKey,
			&i.ContentType,
			&i.SizeBytes,
			&i.UploadedAt,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
