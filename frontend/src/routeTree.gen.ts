/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspaceWorkspaceIdRouteRouteImport } from './routes/workspace/$workspaceId/route'
import { Route as WorkspaceWorkspaceIdNotesIndexRouteImport } from './routes/workspace/$workspaceId/notes/index'
import { Route as WorkspaceWorkspaceIdNotesNoteIdRouteImport } from './routes/workspace/$workspaceId/notes/$noteId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceWorkspaceIdRouteRoute =
  WorkspaceWorkspaceIdRouteRouteImport.update({
    id: '/workspace/$workspaceId',
    path: '/workspace/$workspaceId',
    getParentRoute: () => rootRouteImport,
  } as any)
const WorkspaceWorkspaceIdNotesIndexRoute =
  WorkspaceWorkspaceIdNotesIndexRouteImport.update({
    id: '/notes/',
    path: '/notes/',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)
const WorkspaceWorkspaceIdNotesNoteIdRoute =
  WorkspaceWorkspaceIdNotesNoteIdRouteImport.update({
    id: '/notes/$noteId',
    path: '/notes/$noteId',
    getParentRoute: () => WorkspaceWorkspaceIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteRouteWithChildren
  '/workspace/$workspaceId/notes/$noteId': typeof WorkspaceWorkspaceIdNotesNoteIdRoute
  '/workspace/$workspaceId/notes': typeof WorkspaceWorkspaceIdNotesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteRouteWithChildren
  '/workspace/$workspaceId/notes/$noteId': typeof WorkspaceWorkspaceIdNotesNoteIdRoute
  '/workspace/$workspaceId/notes': typeof WorkspaceWorkspaceIdNotesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteRouteWithChildren
  '/workspace/$workspaceId/notes/$noteId': typeof WorkspaceWorkspaceIdNotesNoteIdRoute
  '/workspace/$workspaceId/notes/': typeof WorkspaceWorkspaceIdNotesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspace/$workspaceId'
    | '/workspace/$workspaceId/notes/$noteId'
    | '/workspace/$workspaceId/notes'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspace/$workspaceId'
    | '/workspace/$workspaceId/notes/$noteId'
    | '/workspace/$workspaceId/notes'
  id:
    | '__root__'
    | '/'
    | '/workspace/$workspaceId'
    | '/workspace/$workspaceId/notes/$noteId'
    | '/workspace/$workspaceId/notes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspaceWorkspaceIdRouteRoute: typeof WorkspaceWorkspaceIdRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$workspaceId': {
      id: '/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$workspaceId/notes/': {
      id: '/workspace/$workspaceId/notes/'
      path: '/notes'
      fullPath: '/workspace/$workspaceId/notes'
      preLoaderRoute: typeof WorkspaceWorkspaceIdNotesIndexRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
    '/workspace/$workspaceId/notes/$noteId': {
      id: '/workspace/$workspaceId/notes/$noteId'
      path: '/notes/$noteId'
      fullPath: '/workspace/$workspaceId/notes/$noteId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdNotesNoteIdRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRouteRoute
    }
  }
}

interface WorkspaceWorkspaceIdRouteRouteChildren {
  WorkspaceWorkspaceIdNotesNoteIdRoute: typeof WorkspaceWorkspaceIdNotesNoteIdRoute
  WorkspaceWorkspaceIdNotesIndexRoute: typeof WorkspaceWorkspaceIdNotesIndexRoute
}

const WorkspaceWorkspaceIdRouteRouteChildren: WorkspaceWorkspaceIdRouteRouteChildren =
  {
    WorkspaceWorkspaceIdNotesNoteIdRoute: WorkspaceWorkspaceIdNotesNoteIdRoute,
    WorkspaceWorkspaceIdNotesIndexRoute: WorkspaceWorkspaceIdNotesIndexRoute,
  }

const WorkspaceWorkspaceIdRouteRouteWithChildren =
  WorkspaceWorkspaceIdRouteRoute._addFileChildren(
    WorkspaceWorkspaceIdRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspaceWorkspaceIdRouteRoute: WorkspaceWorkspaceIdRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
